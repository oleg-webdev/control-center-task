// Document: _mixins.scss

/// Adds a browser prefix to the property
/// @param {*} $property Property
/// @param {*} $value Value

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

/// Box Sizing
/// @param {*} $type [border-box] - Type
/// @require {mixin} css3-prefix

@mixin box-sizing($type: border-box) {
  @include css3-prefix('box-sizing', $type);
}

/// Box Shadow
/// @param {Size} $x [0] - X
/// @param {Size} $y [0] - Y
/// @param {Size} $blur [0] - Blur
/// @param {Size} $spread [0] - Spread
/// @param {Color} $color [rgba(0,0,0,.4)] - Color
/// @param {Boolean} $inset - Inset
/*
This mixin does not allow to use multiple box-shadows
@mixin box-shadow($x: 0, $y: 0, $blur: 5px, $spread: 5px, $color: rgba(0,0,0,.4), $inset: "") {
    @if ($inset != "") {
        @include css3-prefix('box-shadow', $inset $x $y $blur $spread $color);
    } @else {
        @include css3-prefix('box-shadow', $x $y $blur $spread $color);
    }
}
*/
@mixin box-shadow($shadow...) {
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  box-shadow: $shadow;
}

@mixin no-box-shadow {
  @include box-shadow(0 0 0 0 transparent);
}

/// Transform
/// @param {List} $params - Params
/// @require {mixin} css3-prefix

@mixin transform($params) {
  @include css3-prefix('transform', $params);
}

// Translate
@mixin translate($x: 0, $y: 0) {
  @include transform(translate($x, $y));
}

/// Transition
/// @param {List} $properties - Properties
/// @require {mixin} css3-prefix

@mixin transition($properties...) {

  @if length($properties) >= 1 {
    @include css3-prefix('transition', $properties);
  } @else {
    @include css3-prefix('transition', "all 0.2s ease-in-out 0s");
  }
}

/// Border Radius
/// @param {Size} $radius [5px] - Radius
/// @require {mixin} css3-prefix

@mixin border-radius($radius: 50%) {
  @include css3-prefix('border-radius', $radius);
}

/// Border Radius Separate
/// @param {Size} $topLeftRadius [5px] - Top Left
/// @param {Size} $topRightRadius [5px] - Top Right
/// @param {Size} $bottomLeftRadius [5px] - Bottom Left
/// @param {Size} $bottomRightRadius [5px] - Bottom Right

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
  -webkit-border-top-left-radius: $topLeftRadius;
  -webkit-border-top-right-radius: $topRightRadius;
  -webkit-border-bottom-right-radius: $bottomRightRadius;
  -webkit-border-bottom-left-radius: $bottomLeftRadius;

  -moz-border-radius-topleft: $topLeftRadius;
  -moz-border-radius-topright: $topRightRadius;
  -moz-border-radius-bottomright: $bottomRightRadius;
  -moz-border-radius-bottomleft: $bottomLeftRadius;

  border-top-left-radius: $topLeftRadius;
  border-top-right-radius: $topRightRadius;
  border-bottom-right-radius: $bottomRightRadius;
  border-bottom-left-radius: $bottomLeftRadius;
}

/// User Select
/*
user-select: none;
user-select: auto;
user-select: text;
user-select: contain;
user-select: all;

-moz-user-select: none;
-moz-user-select: text;
-moz-user-select: all;

-webkit-user-select: none;
-webkit-user-select: text;
-webkit-user-select: all; /* does not work in Safari, use only "none" or "text", or else it will allow to type in the html container*/

/*
-ms-user-select: none;
-ms-user-select: text;
-ms-user-select: element;

*/

@mixin user-select($value: none) {
  @include css3-prefix('user-select', $value);
}

// clearfix

@mixin clearfix() {
  &:after {
    display: table;
    content: "";
    clear: both;
  }
}

// Linear gradient with color-stops
//
// ----
// Sass (v3.4.7)
// Compass (v1.0.1)
// ----

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top : bottom,
    to top right : bottom left,
    to right top : left bottom,
    to right : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom : top,
    to bottom left : top right,
    to left bottom : right top,
    to left : right,
    to left top : right bottom,
    to top left : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

//// Tests
//
// .test-01 {
//    @include linear-gradient(to right, red 20%, blue 20%);
//}
//
// .test-02 {
//    @include linear-gradient(to right, red, blue 20%, red 20%, blue 40%, red 40%, blue 60%, red 60%, blue 80%, red 80%, blue);
//}
//
//.test-1 {
//    @include linear-gradient(to right, #31B7D7, #EDAC7D);
//}
//
//.test-2 {
//    @include linear-gradient(to right, #E47D7D 0%, #C195D3 50%, #4FB4E8 100%);
//}
//
//.test-3 {
//    @include linear-gradient(42deg, #B58234 0%, #D2B545 50%, #D7C04D 50.01%, #FFFFFF 100%);
//}

// Function checking if $value is a valid length
// ---
// @param [literal] $value: value to test
// ---
// @return [bool]

@function is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != false);
}

// Helper mixin for offset positioning
// About: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// ---
// Here is an improved version adding some extra features
// ---
// @param [string] $position: position
// @param [list] $args (()): offsets list
// ---
// Explanations
// 1. Output position
// 2. If `$args` is not empty
// 3. Loop other the 4 popular offsets (`$offsets`)
// 4. Check if the current one exists in `$args`
// 5. If it is found in `$args`
// 6. And if it is at last position
// 7. Set it to 0
// 8. Else if it is found at any other index
// 9. Store the next value from `$args`
// 10. If it is a valid length
// 11. Set the offset to this value
// 12. Else if it is another offset
// 13. Set the offset to 0
// 14. Else
// 15. Warn the user
// ---

@mixin position($position, $args: ()) {
  $offsets: top right bottom left;
  position: $position; // 1

  @each $offset in $offsets { // 3
    $index: index($args, $offset); // 4

    @if $index { // 5
      @if $index == length($args) { // 6
        #{$offset}: 0; // 7
      } @else { // 8
        $next: nth($args, $index + 1); // 9
        @if is-valid-length($next) { // 10
          #{$offset}: $next; // 11
        } @else if index($offsets, $next) { // 12
          #{$offset}: 0; // 13
        } @else { // 14
          @warn "Invalid value `#{$next}` for offset `#{$offset}`."; // 15
        }
      }
    }
  }
}

// Shorthands
// ---

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}

@mixin fixed($args: ()) {
  @include position(fixed, $args);
}

@mixin relative($args: ()) {
  @include position(relative, $args);
}

// Examples
// ---

/*
.a {
    @include absolute();
}

.b {
    @include absolute(top);
}

.c {
    @include absolute(top right);
}

.d {
    @include absolute(top right bottom);
}

.e {
    @include absolute(top right bottom left);
}

.f {
    @include absolute(top right 1em);
}

.g {
    @include absolute(top 1em right);
}

.h {
    @include absolute(top 1em right 100%);
}

.i {
    @include absolute(top right mistake);
}

.j {
    @include absolute(top 1em right 1em bottom 1em left 1em)
}
*/

// Truncate
// ===========================

@mixin truncate {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Trigger arrows
// ===========================

@mixin trigger-down($border-width: 5px, $color: #333) {
  border: $border-width solid $color;
  border-left-color: transparent;
  border-right-color: transparent;
  border-bottom: none;
}

@mixin trigger-up($border-width: 0, $color: #333) {
  border: $border-width solid $color;
  border-left-color: transparent;
  border-right-color: transparent;
  border-top: none;
}

@mixin trigger-left($border-width: 0, $color: #333) {
  border: $border-width solid $color;
  border-top-color: transparent;
  border-bottom-color: transparent;
  border-left: none;
}

@mixin trigger-right($border-width: 0, $color: #333) {
  border: $border-width solid $color;
  border-top-color: transparent;
  border-bottom-color: transparent;
  border-right: none;
}

// Placeholder
// ========================================

@mixin placeholder {
  &::-webkit-input-placeholder { /* Chrome/Opera/Safari */
    @content;
  }

  &::-moz-placeholder { /* Firefox 19+ */
    @content;
  }

  &:-ms-input-placeholder { /* IE 10+ */
    @content;
  }

  &:-moz-placeholder { /* Firefox 18- */
    @content;
  }
}


// Square
// ========================================

@mixin square($square-dimensions) {
  width: $square-dimensions;
  height: $square-dimensions;
}


// Animation
// ========================================

@mixin animation(
  $animation,
  $duration: 2s,
  $delay: 0s,
  $fill-mode: initial,
  $iteration: infinite
) {
  -webkit-animation-delay: $delay;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation;
  -webkit-animation-fill-mode: $fill-mode;
  -webkit-animation-iteration-count: $iteration; /* this prevents the animation from restarting! */

  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-fill-mode: $fill-mode;
  -moz-animation-iteration-count: $iteration; /* this prevents the animation from restarting! */

  -o-animation-delay: $delay;
  -o-animation-duration: $duration;
  -o-animation-name: $animation;
  -o-animation-fill-mode: $fill-mode;
  -o-animation-iteration-count: $iteration; /* this prevents the animation from restarting! */

  animation-delay: $delay;
  animation-duration: $duration;
  animation-name: $animation;
  animation-fill-mode: $fill-mode;
  animation-iteration-count: $iteration; /* this prevents the animation from restarting! */
}

/*
    Example:
    @include animation(10s, 5s, changecolour, infinite)
 */
